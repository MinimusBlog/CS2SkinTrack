import os,telebot,json,requests,logging
from telebot import types
from time import sleep
from dotenv import load_dotenv
from datetime import datetime
import xml.etree.ElementTree as ET
from bs4 import BeautifulSoup

load_dotenv()
url = os.getenv("STEAM_MARKET")
=======
from bs4 import BeautifulSoup
load_dotenv()
url = "https://steamcommunity.com/market/listings/730/"

def register_handlers(bot):
    data_file_path = os.path.join(os.path.dirname(__file__), "data.json")
    with open(data_file_path, "r", encoding="utf-8") as file:
        data = file.read()
    CATEGORY = json.loads(data)["CATEGORY"]
    GUNS = json.loads(data)["GUNS"]
    QUALITY = json.loads(data)["QUALITY"]
    
    ALL_SKINS = []
    for tip in CATEGORY:
        for gun in GUNS[tip]:
            ALL_SKINS.append(GUNS[tip][gun])

    @bot.message_handler(commands=['start'])
    def start_message(message):
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item1 = types.KeyboardButton("–ü–æ–º–æ—â—å")
        item2 = types.KeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è") 
        item3 = types.KeyboardButton("–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞") 
        markup.add(item1, item2,item3)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
        

    @bot.message_handler(func=lambda message: message.text == '–ü–æ–º–æ—â—å')
    def help_message(message):
        instructions = """
        –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:
        1. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.
        2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
        """
        bot.send_message(message.chat.id, instructions)

    @bot.callback_query_handler(func=lambda callback: True)
    def callback_message(callback):
        global url
        global get_text
        global page
        global pg

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            global page
            global url
            global get_text
            global sticker_name
            if get_text:
                NUM = "0123456789"
                if len(message.text)>1:
                    sticker_name = message.text.replace(" ","+")
                url_render = url+"/render/?filter="+sticker_name+"&query=&start=0&count=10&country=RU&language=russian&currency=1"
                render_req = requests.get(url_render)
                cnt = 54
                while render_req.text[cnt] in NUM:
                    cnt += 1
                bot.send_message(message.chat.id,"–í—Å–µ–≥–æ –æ—Ä—É–∂–∏—è: "+render_req.text[54:cnt])
                page = int(render_req.text[54:cnt])//10+1
                menu_next(message)
                get_text = False

        if (callback.data=="–î–∞–ª–µ–µ"):
            PRICE_TYPE = ("market_listing_price_with_fee", "market_listing_price_with_publisher_fee_only", "market_listing_price_without_fee")
            PRICE_TYPE_NAME = ("—Å –∫–æ–º–∏—Å—Å–∏–µ–π", "—Å –∫–æ–º–∏—Å—Å–∏–µ–π –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏")
            
            bot.send_message(callback.message.chat.id,"="*10+"\n"+str(pg+1)+"-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            urll = url+"/?filter="+sticker_name+"&query=&start="+str(pg*10)+"&count=10&country=RU&language=russian&currency=1"
            if pg == 0:
                bot.send_message(callback.message.chat.id,"—ç—Ç–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."+"\n"+"-"*10+"\n"+urll+"\n"+"-"*10)
            pg += 1
            req = requests.get(urll)
            soup = BeautifulSoup(req.text, "html.parser")

            for t in PRICE_TYPE:
                price = soup.find_all("span", class_=t)
                bot.send_message(callback.message.chat.id,PRICE_TYPE_NAME[PRICE_TYPE.index(t)])
                stroke = ""
                for data in price:
                    stroke+=str(price.index(data) + 1)+data.text[5::]+"\n"
                bot.send_message(callback.message.chat.id,stroke)
            if pg<page:
                menu_next(callback.message)
            else:
                menu_end(callback.message)

        for q in QUALITY:
            if callback.data == q:
                url+= "%28" + callback.data.replace(" ","%20") + "%29"
                get_text = True
                bot.send_message(callback.message.chat.id,"–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤:")

        for tip in CATEGORY:
            if callback.data == tip:
                menu_guns(callback.message,callback.data)
            
            for gun in GUNS[tip]:
                if callback.data == gun:
                    menu_skins(callback.message,tip,gun)
                    url = url + callback.data.replace(" ","%20") + "%20"
                for skin in GUNS[tip][gun]:
                    if callback.data == skin:
                        menu_quality(callback.message,callback.data)
                        url+= "%7C%20" + callback.data.replace(" ","%20") + "%20"

    @bot.message_handler(func=lambda message: message.text == '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞')

    def menu_category(message):
        markup = types.InlineKeyboardMarkup()
        for tip in CATEGORY:
            markup.add(types.InlineKeyboardButton(tip,callback_data=tip))
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è:",reply_markup=markup)

    def menu_guns(message,tmp):
        markup = types.InlineKeyboardMarkup()
        for gun in GUNS[tmp]:
            markup.add(types.InlineKeyboardButton(gun,callback_data=gun))
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ:",reply_markup=markup)

    def menu_skins(message,tmp,tmp2):
        markup = types.InlineKeyboardMarkup()
        for skin in GUNS[tmp][tmp2]:
            markup.add(types.InlineKeyboardButton(skin,callback_data=skin))
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∏–Ω:",reply_markup=markup)

    def menu_quality(message,tmp):
        markup = types.InlineKeyboardMarkup()
        for q in QUALITY:
            markup.add(types.InlineKeyboardButton(q,callback_data=q))
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:",reply_markup=markup)

    def menu_next(message):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞–ª–µ–µ",callback_data="–î–∞–ª–µ–µ"))
        bot.reply_to(message, "–Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",reply_markup=markup)
        
    def menu_end(message):
        bot.send_message(message.chat.id,"–∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.")

    def get_cbr_rates():
        url = os.getenv("CBR_CURRENCY")
        response = requests.get(url)
        response.encoding = 'windows-1251'
        root = ET.fromstring(response.text)
        needed = {'USD', 'EUR', 'GBP', 'KZT'}
        rates = {}
        for valute in root.findall('Valute'):
            char_code = valute.find('CharCode').text
            if char_code in needed:
                nominal = int(valute.find('Nominal').text)
                value = float(valute.find('Value').text.replace(',', '.'))
                rates[char_code] = round(value / nominal, 4)
        return rates
    
    def convert_rub_to_others(amount_rub):
        rates = get_cbr_rates()
        converted = {cur: round(amount_rub / rate, 2) for cur, rate in rates.items()}
        return converted
    
    @bot.message_handler(func=lambda message: message.text == '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')
    
    def ask_amount(message):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        bot.register_next_step_handler(msg, convert_currency_step)

    
    def convert_currency_step(message):
        try:
            amount_rub = float(message.text)
            converted = convert_rub_to_others(amount_rub)
            text = f"{amount_rub} RUB —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ:\n"
            for cur, val in converted.items():
                text += f"üí± {val} {cur}\n"
            bot.send_message(message.chat.id, text)
        except ValueError:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
    @bot.message_handler(content_types=['photo']) #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
    def handle_photo_message(message):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π '–ü–æ–º–æ—â—å'.")
    
    @bot.message_handler(content_types=['video']) #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ
    def handle_video_message(message):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π '–ü–æ–º–æ—â—å'.")

    @bot.message_handler(content_types=['document']) #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    def handle_document_message(message):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π '–ü–æ–º–æ—â—å'.")

    @bot.message_handler(content_types=['voice']) #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    def handle_voice_message(message):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π '–ü–æ–º–æ—â—å'.")
    @bot.message_handler(content_types=['sticker']) #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
    def handle_sticker_message(message):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π '–ü–æ–º–æ—â—å'.")